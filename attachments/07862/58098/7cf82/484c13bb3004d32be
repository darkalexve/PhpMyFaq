CREACION DE CLUSTER POSTGRES 9.4 CON DRBD Y HEARTBEAT - CENTOS 6.



Objetivos:

- Crear un cluster de postgres 9.4 con alta disponibilidad basado en Heartbeat y DRBD.
- Crear una estructura de scripts que permita múltiples bases de datos sobre el recurso DRBD.
- Automatizar el arranque de las bases de datos vía heartbeat.


Ambiente Base:

Servidores CENTOS 6 con EPEL 6 instalado (arquitectura x86_64), firewall y selinux desactivados. UPDATES HASTA LA FECHA !!.

VM's sobre OpenStack con 16 cores, 16 GB's de ram, 32 GB's de swap, y disco efímero extra con 150 GB's de espacio (/dev/vdb).

IPs:

Nodo 1: Principal: 172.16.12.20 (tráfico PGSQL); Secundaria (tráfico DRBD): 172.16.11.93
Nodo 2: Principal: 172.16.10.21 (tráfico PGSQL); Secundaria (tráfico DRBD): 172.16.11.94

Paso 1: Definiendo IP estatica para evitar inconvenientes o interferencias con el DHCP de OpenStack.

Se ejecuta el comando setup en ambas virtuales (se ingresa desde la ip principal) y se determina la misma ip en modo estatico, se ejecuta un reboot para garantizar que todo funcione. 

Luego vamos a la ruta: cd /etc/sysconfig/network-scripts/ y creamos la interfaz eth1 de la siguiente manera:

vi ifcfg-eth1

Contenido:

DEVICE=eth1
BOOTPROTO=none
NM_CONTROLLED=yes
ONBOOT=yes
TYPE=Ethernet
IPADDR=172.16.11.93
NETMASK=255.255.255.0
DNS2=172.16.17.2
DNS1=172.16.17.1
IPV6INIT=no
USERCTL=no


En este caso el contenido debe ser la IP segundaria, esto lo replicamos en el Nodo 2 de la misma manera.

Levantamos la interfaz eth1: ifup eth1

Editamos el script de autoconfiguracion del servidor: vi /etc/autoconfig-server-options.conf

Añadiendo en la ultima linea lo siguiente:

INTERFACE=eth0

Por ultimo vamos a la ruta: /usr/local/bin/ y ejecutamos el script de autoconfiguracion del servidor ./script-autoconfig-server.sh para que reconozca su identidad.


Paso 2: Configuracion de Relacion de Confianza.

En ambos servidores ejecutamos:

ssh-keygen (enter a todo)

Luego vi /root/.ssh/config

Host *
StrictHostKeyChecking no
UserKnownHostsFile=/dev/null

Y se le cambia el modo:

chmod 600 /root/.ssh/config

Se elimina cualquier archivo "known_host" previamente existente:

rm -f /root/.ssh/known_hosts

Ejecutamos: ssh-keygen -t dsa en ambos servidores

Desde el Nodo 1: ssh-copy-id -i /root/.ssh/id_dsa.pub 172.16.12.21
Desde el Nodo 2: ssh-copy-id -i /root/.ssh/id_dsa.pub 172.16.12.20

Paso 3: Customizacion de Archivos BASE.

En el /etc/sysctl.conf se agregaron/cambiaron los siguientes items:

kernel.shmmax = 17179869184
kernel.shmall = 2147483648
kernel.sem = 500 32000 300 1500

Y se ejecutó sysctl -p

En el archivo /etc/security/limits.conf se agrega al final:

   postgres soft nofile 1024
   postgres hard nofile 65536

   postgres soft nproc 4094
   postgres hard nproc 16384

   postgres soft stack 10240
   postgres hard stack 32768

Se salva el archivo.

Esto finaliza la preparación BASE de los servidores.

neutron port-create --fixed-ip ip_address=172.16.12.212 --security-group DRBD --security-group Postgres --security-group Heartbeat net-vlan-12

neutron port-list | grep 172.16.12.20 | awk '{print $2}'
0e718b8d-1227-446b-b4b4-51093cab3f34

neutron port-list | grep 172.16.12.21 | awk '{print $2}'
75467f8d-0a6b-49c9-9c41-322433cd89a8






                               









